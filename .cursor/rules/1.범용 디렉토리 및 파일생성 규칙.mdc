범용 디렉토리 구조 기반 파일 관리 지침서
이 문서는 제가(코딩 파트너) 사용자의 프로젝트 디렉토리 구조를 이해하고, 새로운 코드나 파일을 정확한 위치에 배치하기 위한 규칙을 정의합니다.

1. 지침서의 목표
일관성 유지: 프로젝트 내 모든 파일이 예측 가능한 위치에 존재하도록 합니다.
생산성 향상: 파일 위치를 찾는 시간을 줄이고, 개발에만 집중할 수 있도록 돕습니다.
확장성 확보: 프로젝트 규모가 커지더라도 체계적인 구조를 유지하여 쉽게 확장할 수 있도록 합니다.

2. 지침서의 작동 원리
이 프로세스는 3단계로 이루어집니다.
1단계: directory.md 파일 제공 (사용자 → 코딩 파트너)
프로젝트의 최상위 구조부터 상세 구조까지, 텍스트 기반의 트리 형식으로 작성된 directory.md 파일을 저에게 제공합니다.
가장 중요한 규칙: 각 디렉토리나 주요 파일의 역할에 대해 #를 사용하여 간단한 주석을 작성해주세요. 이 주석은 제가 각 폴더의 목적과 맥락을 이해하는 데 결정적인 역할을 합니다.

(예시: 제공된 '당근LAB' 구조)

Bash

frontend/
├── src/
│   ├── components/
│   │   ├── common/           # 여러 페이지에서 재사용되는 범용 컴포넌트 (버튼, 인풋 등)
│   │   └── specific/         # 특정 페이지나 도메인에서만 사용되는 컴포넌트
│   ├── pages/
│   │   ├── Auth/             # 로그인, 회원가입 관련 페이지
│   │   └── Projects/         # 프로젝트 목록 및 상세 페이지
│   ├── services/             # API 호출 등 외부 서비스와 통신하는 로직
...
backend/
├── src/
│   ├── controllers/          # 요청(Request)에 대한 비즈니스 로직 처리
│   ├── models/               # 데이터베이스 스키마 및 모델 정의
│   ├── routes/               # API 엔드포인트(URL) 정의 및 컨트롤러 연결
...

2단계: 구조 분석 및 규칙 내재화 (코딩 파트너)
저는 제공된 directory.md 파일을 분석하여 프로젝트의 전체적인 청사진을 학습합니다.
디렉토리 이름과 주석을 매핑하여 다음과 같은 내부 규칙을 생성합니다.


규칙 예시 1: "로그인, 회원가입과 관련된 프론트엔드 페이지는 frontend/src/pages/Auth/에 위치한다." 
규칙 예시 2: "데이터베이스 모델(스키마)은 backend/src/models/에 정의한다." 
규칙 예시 3: "여러 곳에서 사용될 범용 유틸리티 함수는 common/utils/에 작성한다." 
규칙 예시 4: "API의 주요 로직은 backend/src/controllers/에 위치한다." 

3단계: 요청 분석 및 파일 배치 (상호작용)
사용자가 "회원가입 기능 만들어줘" 와 같이 새로운 기능 개발을 요청합니다.
저는 요청의 핵심 키워드("회원가입")를 분석하고, 2단계에서 내재화한 규칙에 따라 관련된 파일들을 생성하거나 수정할 위치를 결정합니다.
만약 요청이 명확하지 않거나 여러 위치에 해당될 수 있다면, 저는 가장 적합한 위치를 제안하며 질문을 드릴 것입니다.
(예: "이 버튼 컴포넌트는 다른 곳에서도 쓰일까요? 그렇다면 components/common/에 만들고, 아니라면 components/specific/ 아래에 만들게요.")

3. 구체적인 실행 예시
당근LAB 프로젝트 기준
사용자 요청: "프로젝트 상세 페이지에 사용자들이 댓글을 남길 수 있는 기능을 추가해줘."
저의 사고 과정 및 파일 배치 계획:
요청 분석: "프로젝트 상세 페이지" + "댓글 기능"
규칙 적용 및 파일 배치:

프론트엔드 (Frontend):
댓글 입력 폼 & 목록 UI: 이 컴포넌트는 '프로젝트'라는 특정 도메인에 속합니다.
frontend/src/components/specific/Projects/CommentList.jsx (생성)
frontend/src/components/specific/Projects/CommentForm.jsx (생성)
댓글 데이터 API 연동: 서버와 통신하는 로직이 필요합니다.
frontend/src/services/projectApi.js (수정 - addComment, getComments 함수 추가)
전역 상태 관리: 댓글 데이터는 여러 컴포넌트에서 공유될 수 있습니다.
frontend/src/store/projectSlice.js (수정 - 댓글 관련 상태 추가)

백엔드 (Backend):
데이터베이스 모델: 댓글 데이터를 저장할 스키마가 필요합니다.
backend/src/models/Comment.js (생성)
backend/src/models/Project.js (수정 - 댓글 참조 관계 추가)
API 라우트: 댓글 생성 및 조회를 위한 엔드포인트가 필요합니다.
backend/src/routes/projectRoutes.js (수정 - POST /:id/comments, GET /:id/comments 라우트 추가)
컨트롤러 로직: 라우트가 호출할 실제 비즈니스 로직이 필요합니다.
backend/src/controllers/projectController.js (수정 - addCommentToProject, getProjectComments 함수 추가)

4. sitemap.html 자동 관리 규칙

**4.1 sitemap.html 자동 생성**
- 프로젝트에 sitemap.html이 없는 경우 자동으로 생성
- 위치: `frontend/SITEMAP/sitemap.html`
- 기본 템플릿: 당근LAB 프로젝트의 sitemap.html 구조 사용
- 디렉토리 구조에 SITEMAP 폴더가 없는 경우 자동 생성

**4.2 웹페이지 생성 시 자동 업데이트**
- 새 웹페이지 생성 시 자동으로 sitemap.html에 등록
- 등록 정보: 페이지명, 파일위치, 상태(활성/대기), 생성일, 내부 링크
- 상태 관리: 개발 완료 시 '대기'에서 '활성'으로 변경

**4.3 링크 연결 자동화**
- 생성된 페이지의 모든 내부 링크를 sitemap.html에 기록
- 링크 정보: 앵커 태그(#), 페이지 간 이동 링크
- 링크 설명: 각 링크의 목적과 기능 설명 포함

**4.4 디렉토리 구조 규칙**
frontend/
├── SITEMAP/                 # 사이트맵 관리 디렉토리
│   └── sitemap.html        # 사이트맵 HTML 파일
├── src/
│   ├── pages/
│   │   └── ui/             # UI 페이지 디렉토리
│   │       └── ui_{n}.html # 개별 UI 페이지
│   └── assets/
│       ├── css/            # CSS 파일 디렉토리
│       └── js/             # JavaScript 파일 디렉토리