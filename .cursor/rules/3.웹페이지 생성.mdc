# UI 페이지 개발 및 최종화 가이드

본 가이드는 초기 요구사항 정의부터 최종 배포까지, UI 페이지를 구축, 최종화, 통합하는 **표준화된 개발 프로세스**를 설명합니다. 단일 에이전트 및 다중 에이전트 워크플로우를 모두 포함하며, 디렉토리 및 파일명 규칙에 따라 일관된 구조로 개발을 수행합니다.

---

## 1. 목표

### 1.1 기본 목표
- 정의된 사용자 요구사항과 `designs/design.json`에 명시된 디자인 시스템을 기반으로, 단일 인터페이스 화면을 위한 **독립형(standalone) HTML 페이지**를 구축합니다. (중요 : **디자인은 fontend>src>pages에 디렉토리 폴더에 신규로 생성합니다.** )

### 1.2 다중 에이전트 목표
- 복잡한 요구사항의 경우, 최대 3개의 하위 에이전트를 병렬 실행하여 각기 다른 UI 컨셉(예: UX 중심, 개발 효율 중심, 비즈니스 중심)을 설계합니다.
- 이해관계자는 제안된 옵션을 비교하여 가장 효과적인 솔루션을 선택합니다.

---

## 2. 1단계: 개발 전 준비사항

개발을 시작하기 전, 다음 조건들이 모두 충족되어야 합니다.

- **2.1 요구사항 정의**: 구축할 페이지의 목적, 특징, 기능이 요약된 요구사항 명세서
- **2.2 디자인 시스템 확정**: 스타일 토큰(색상, 타이포그래피, 간격 등)이 정의된 `designs/design.json` 파일 완성
- **2.3 파일명 및 디렉토리 결정**: 결과물 저장 경로와 명명 규칙(예: `ui_{n}.html`) 사전 확정

---

## 3. 2단계: 개발 프로세스

개발은 다음의 절차에 따라 진행합니다.

- **3.1 디자인 시스템 검토**  
  `designs/design.json`에 정의된 규칙을 면밀히 검토하여 토큰과 컴포넌트를 내재화합니다.

- **3.2 HTML 페이지 구축**  
  사용자 요구사항과 디자인 시스템을 기반으로 정적 HTML 페이지를 구성합니다.  
  모든 UI 컴포넌트는 정의된 가이드라인을 준수해야 합니다.

- **3.3 저장 및 연결**  
  완성된 HTML 파일은 규칙에 따라 지정 디렉토리에 저장하며, 필요한 경우 생성된 UI 내에 다른 페이지와 링크 연결을 설정합니다.

  - **3.4 SITE/sitemap.html 자동 업데이트**  
  완성된 HTML 파일은 sitemap.html의 페이지에 관리항목으로 자동 업데이트되며, 생성된 html은 가이드에 따라 모두 페이지와 링크 연결을 설정합니다.
  
  **3.4.1 sitemap.html 자동 생성 규칙**
  - 프로젝트에 sitemap.html이 없는 경우 자동으로 생성
  - 위치: `frontend/SITEMAP/sitemap.html`
  - 기본 템플릿: 당근LAB 프로젝트의 sitemap.html 구조 사용
  
  **3.4.2 페이지 등록 규칙**
  - 새 페이지 생성 시 자동으로 sitemap.html에 등록
  - 등록 정보: 페이지명, 파일위치, 상태(활성/대기), 생성일, 내부 링크
  - 상태 관리: 개발 완료 시 '대기'에서 '활성'으로 변경
  
  **3.4.3 링크 연결 규칙**
  - 생성된 페이지의 모든 내부 링크를 sitemap.html에 기록
  - 링크 정보: 앵커 태그(#), 페이지 간 이동 링크
  - 링크 설명: 각 링크의 목적과 기능 설명 포함

---

## 4. 3단계: 최종화 및 통합

구축된 페이지는 아래의 절차를 거쳐 프로젝트에 통합됩니다.

- **4.1 품질 보증 (QA)**  
  아래 항목 기준으로 품질 검수를 수행합니다:
  - 디자인 일관성: 디자인 시스템과의 일치 여부  
  - 기능성: 모든 인터랙션 요소 정상 작동  
  - 성능: 로딩 시간 3초 이내  
  - 접근성: WCAG 2.1 Level AA 기준 충족


## 5. 4단계: 신규 요청 및 디렉토리 규칙

신규 페이지 개발 요청 시 다음 기준을 적용합니다.

- **5.1 파일명 및 디렉토리 구조 준수**
  - HTML: `src/pages/ui/ui_{n}.html`  
  - CSS: `src/assets/css/ui_{n}.css`  
  - JS: `src/assets/js/ui_{n}.js`  
  - 이미지: `public/assets/img/ui_{n}/`

- **5.2 기준 페이지 참조**
  - `ui_1.html`을 스타일 및 레이아웃 기준으로 삼아 전체 톤앤매너를 유지합니다.

- **5.3 공통 요소 통합 사용**
  - GNB(Global Navigation Bar), Footer 등은 공통 컴포넌트로 사용합니다.  
  - 개별 정의는 금지되며, 변경 시 전체 반영이 가능해야 합니다.

- **5.4 디자인 시스템 상속 원칙**
  - 모든 스타일은 `designs/design.json`의 토큰을 상속하며, 예외는 별도 승인 절차를 거쳐야 합니다.

- **5.5 개발 산출물 저장 위치 고정**
  - 요청서, 회신서, 검수 결과 등 관련 산출물은 `/docs/requests/ui_{n}/`에 일괄 저장합니다.

- **5.6 sitemap.html 자동 업데이트 프로세스**
  - 새 페이지 생성 완료 후 자동으로 sitemap.html 업데이트
  - 업데이트 내용: 페이지 정보, 링크 연결, 상태 관리
  - 통계 정보 자동 갱신: 활성/대기 페이지 수, 완성도 계산

---

## 6. 부록: 품질 검수 체크리스트 (요약)

| 항목             | 기준 설명                                         |
|------------------|--------------------------------------------------|
| 디자인 일관성    | 디자인 시스템에 정의된 색상, 폰트, 간격 일치 여부 |
| 기능성           | 버튼, 폼 등 상호작용 기능의 정상 동작 여부       |
| 성능             | 로딩 시간 3초 이내 (Lighthouse 기준)             |
| 접근성           | WCAG 2.1 AA 기준 준수 여부 (role, aria 등)        |

---

## 7. sitemap.html 자동 관리 실행 단계

### 7.1 신규 프로젝트 시작 시
1. **sitemap.html 존재 여부 확인**
   - `frontend/SITEMAP/sitemap.html` 파일 존재 확인
   - 없으면 당근LAB 프로젝트의 sitemap.html을 템플릿으로 생성

2. **디렉토리 구조 생성**
   - `frontend/SITEMAP/` 디렉토리 자동 생성
   - `frontend/src/pages/ui/` 디렉토리 자동 생성

### 7.2 새 웹페이지 생성 시
1. **페이지 생성 완료 후 자동 등록**
   - 페이지명: `ui_{n}.html` 형식
   - 파일위치: `src/pages/ui/ui_{n}.html`
   - 상태: '대기' (개발 완료 시 '활성'으로 변경)
   - 생성일: 현재 날짜

2. **링크 정보 자동 추출**
   - HTML 파일에서 모든 `<a href="">` 태그 추출
   - 앵커 태그(`#`) 및 페이지 간 링크 기록
   - 링크 설명 자동 생성

3. **통계 정보 자동 갱신**
   - 활성 페이지 수 계산
   - 대기 페이지 수 계산
   - 완성도 퍼센트 계산 (활성/전체 * 100)

### 7.3 페이지 개발 완료 시
1. **상태 업데이트**
   - '대기'에서 '활성'으로 상태 변경
   - 완성도 통계 자동 갱신

2. **링크 연결 검증**
   - 모든 내부 링크가 정상 작동하는지 확인
   - 링크 설명 업데이트

---
